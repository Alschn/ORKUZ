# https://docs.github.com/en/actions/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
name: Backend Release

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-release.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/orkuz-backend

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
        run:
            working-directory: backend

    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Docker image tag
        id: get_image_tag
        shell: bash
        run: |
          branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          if [[ $branch == "main" ]]; then
            image_tag=latest
          else
            image_tag=${branch//\//.}
          fi
          echo "The image tag is: $image_tag"
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
